create database zomato_DB;
use zomato_DB;

#IDENTIFYING DUPLICATES

select *, count(*) 
from Zomato_Orders
group by order_id, restaurant_id, customer_id, order_date, order_time, delivery_time, total_cost, item_count, payment_method, customer_rating
having count(*) > 1;

select *, count(*) 
from Zomato_Restaurants
group by restaurant_id, restaurant_name, city, area, cuisine, avg_rating, total_ratings, price_range, delivery_available
having count(*) > 1;													#No Duplicate data


#checking Null Values
select 
    ifnull(sum(case when order_id is null then 1 else 0 end), 0) as order_id_nulls,
    ifnull(sum(case when restaurant_id is null then 1 else 0 end), 0) as restaurant_id_nulls,
    ifnull(sum(case when customer_id is null then 1 else 0 end), 0) as customer_id_nulls,
    ifnull(sum(case when order_date is null then 1 else 0 end), 0) as order_date_nulls,
    ifnull(sum(case when order_time is null then 1 else 0 end), 0) as order_time_nulls,
    ifnull(sum(case when delivery_time is null then 1 else 0 end), 0) as delivery_time_nulls,
    ifnull(sum(case when total_cost is null then 1 else 0 end), 0) as total_cost_nulls,
    ifnull(sum(case when item_count is null then 1 else 0 end), 0) as item_count_nulls,
    ifnull(sum(case when payment_method is null then 1 else 0 end), 0) as payment_method_nulls,
    ifnull(sum(case when customer_rating is null then 1 else 0 end), 0) as customer_rating_nulls
from zomato_orders;


select 
    ifnull(sum(case when restaurant_id is null then 1 else 0 end), 0) as restaurant_id_nulls,
    ifnull(sum(case when restaurant_name is null then 1 else 0 end), 0) as restaurant_name_nulls,
    ifnull(sum(case when city is null then 1 else 0 end), 0) as city_nulls,
    ifnull(sum(case when area is null then 1 else 0 end), 0) as area_nulls,
    ifnull(sum(case when cuisine is null then 1 else 0 end), 0) as cuisine_nulls,
    ifnull(sum(case when avg_rating is null then 1 else 0 end), 0) as avg_rating_nulls,
    ifnull(sum(case when total_ratings is null then 1 else 0 end), 0) as total_ratings_nulls,
    ifnull(sum(case when price_range is null then 1 else 0 end), 0) as price_range_nulls,
    ifnull(sum(case when delivery_available is null then 1 else 0 end), 0) as delivery_available_nulls
from zomato_restaurants;													#No null fields


#Count the number of restaurants in each city.

select city,
count(restaurant_id) as restaurant_count
from zomato_restaurants
group by city
order by restaurant_count desc;

#Find the top 5 cities with the highest number of orders.

select r.city, count(o.order_id) as total_orders
from zomato_orders o
join zomato_restaurants r on o.restaurant_id = r.restaurant_id
group by r.city
order by total_orders desc
limit 5;

#Calculate the total revenue generated by each restaurant.

select r.restaurant_id, r.restaurant_name, r.city, sum(o.total_cost) as total_sales
from zomato_orders o
join zomato_restaurants r 
on o.restaurant_id = r.restaurant_id
group by r.restaurant_id, r.restaurant_name, r.city
order by total_sales desc
limit 5;

#Find the average order amount for each city.

select r.city,
avg(o.total_cost) as avg_order_amount
from zomato_orders o
join zomato_restaurants r on o.restaurant_id = r.restaurant_id
group by r.city
order by avg_order_amount desc;


#Identify the top 5 restaurants with the highest total sales.

select r.restaurant_name,sum(o.total_cost) as total_sales
from zomato_orders o
join zomato_restaurants r 
on o.restaurant_id = r.restaurant_id
group by r.restaurant_name
order by total_sales desc
limit 5;

#Data Joins
#Join the Zomato_Orders and Zomato_Restaurants tables to get restaurant names along with order details.

select 
    o.order_id,
    o.restaurant_id,
    r.restaurant_name,
    r.city,
    r.area,
    r.cuisine,
    o.customer_id,
    o.order_date,
    o.order_time,
    o.delivery_time,
    o.total_cost,
    o.item_count,
    o.payment_method,
    o.customer_rating,
    r.avg_rating,
    r.total_ratings,
    r.price_range,
    r.delivery_available
from zomato_orders o
join zomato_restaurants r 
on o.restaurant_id = r.restaurant_id;

